{
  "openapi": "3.0.1",
  "info": {
    "title": "REST API for Swagger Documentation for our Travel APP",
    "version": "2.0.1"
  },
  "schemes": ["http", "https"],
  "servers": [
    {
      "url": "https://travel-nodejs.vercel.app/",
      "description": "Production"
    },
    {
      "url": "http://localhost:4001/",
      "description": "Development"
    }
  ],
  "security": [
    {
      "xAuthToken": []
    }
  ],
  "paths": {
    "/test": {
      "get": {
        "summary": "Test endpoint to wake server from sleep",
        "description": "Returns a simple 'working...' message.",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "example": "working.."
                }
              }
            }
          }
        }
      }
    },
    "/auth": {
      "post": {
        "summary": "for registration",
        "description": "you can create three type of users, role  0  = admin, role 1 = regular user and 2 for the hotels/destination owner",
        "tags": ["Auth"],
        "produces": ["application/json"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "email": {
                    "type": "email",
                    "example": "anjitpariyar@gmail.com"
                  },
                  "fullName": {
                    "type": "string",
                    "example": "anj it"
                  },
                  "password": {
                    "type": "string",
                    "example": "string"
                  },
                  "role": {
                    "type": "number",
                    "enum": [0, 1, 2],
                    "example": 1
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "email": {
                      "type": "email",
                      "example": "anjitpariyar@gmail.com"
                    },
                    "fullName": {
                      "type": "string",
                      "example": "anj it"
                    },
                    "avatarUrl": {
                      "type": "string",
                      "example": "https://res.cloudinary.com/dem2xvk2e/image/upload/v1682476653/chat/qfemlneebclcpd2pwi2h.png"
                    },
                    "role": {
                      "type": "number",
                      "example": 1
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/auth/login": {
      "post": {
        "summary": "for login",
        "tags": ["Auth"],
        "produces": ["application/json"],
        "description": "token valid for a day",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "email": {
                    "type": "email",
                    "example": "anjitpariyar@gmail.com"
                  },
                  "password": {
                    "type": "string",
                    "example": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "access_token": {
                          "type": "string"
                        },
                        "user": {
                          "type": "object",
                          "properties": {
                            "_id": {
                              "type": "string"
                            },
                            "email": {
                              "type": "string"
                            },
                            "fullName": {
                              "type": "string"
                            },
                            "role": {
                              "type": "integer"
                            },
                            "avatarUrl": {
                              "type": "string"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/auth/logout": {
      "get": {
        "tags": ["Auth"],
        "summary": "Logout user",
        "description": "Logs out the authenticated user.",
        "security": [
          {
            "xAuthToken": []
          }
        ],
        "responses": {
          "200": {
            "description": "Successful logout",
            "content": {
              "application/json": {
                "example": {
                  "status": 200,
                  "data": {},
                  "meta": {},
                  "msg": "Logout Successful"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "example": {
                  "status": 401,
                  "data": {},
                  "meta": {},
                  "msg": "Unauthorized"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "example": {
                  "status": 500,
                  "data": {},
                  "meta": {},
                  "msg": "Server Error"
                }
              }
            }
          }
        }
      }
    },
    "/hotels": {
      "get": {
        "summary": "get Hotel list",
        "tags": ["Hotel"],
        "produces": ["application/json"],
        "description": "authorization is optional here. if you send  x-auth-token, you receive (isLiked : true) if user have save the ",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 200
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "pid": {
                            "type": "string"
                          },
                          "name": {
                            "type": "string"
                          },
                          "location": {
                            "type": "string"
                          },
                          "price": {
                            "type": "string"
                          },
                          "about": {
                            "type": "string"
                          },
                          "service": {
                            "type": "array",
                            "items": {
                              "type": "object"
                            }
                          },
                          "food": {
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          },
                          "reviews": {
                            "type": "array",
                            "items": {
                              "type": "object"
                            }
                          },
                          "rate": {
                            "type": "number"
                          },
                          "gallery": {
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          },
                          "url": {
                            "type": "string"
                          }
                        }
                      }
                    },
                    "paginate": {
                      "type": "object",
                      "properties": {
                        "page": {
                          "type": "integer",
                          "example": 0
                        },
                        "perPage": {
                          "type": "integer",
                          "example": 0
                        },
                        "total": {
                          "type": "integer",
                          "example": 0
                        }
                      }
                    },
                    "message": {
                      "type": "string",
                      "example": "Data"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },

    "/hotels/{id}": {
      "get": {
        "summary": "Get a hotel by ID",
        "description": "you can get uniq hotel id from above [/hotels] API",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the hotel",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "tags": ["Hotel"],
        "produces": ["application/json"],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "pid": {
                      "type": "string"
                    },
                    "name": {
                      "type": "string"
                    },
                    "location": {
                      "type": "string"
                    },
                    "price": {
                      "type": "string"
                    },
                    "about": {
                      "type": "string"
                    },
                    "service": {
                      "type": "array",
                      "items": {
                        "type": "object"
                      }
                    },
                    "food": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "reviews": {
                      "type": "array",
                      "items": {
                        "type": "object"
                      }
                    },
                    "rate": {
                      "type": "number"
                    },
                    "gallery": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "url": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/hotels/save": {
      "get": {
        "tags": ["Hotel"],
        "summary": "Get saved hotels",
        "security": [{ "xAuthToken": [] }],
        "description": "This sends the hotels that user has saved. therefore you need authentication to access this",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "example": {
                  "status": 200,
                  "data": [
                    {
                      "_id": "hotel_id_1",
                      "pid": "12345",
                      "name": "Hotel 1",
                      "location": "Location 1",
                      "price": "100",
                      "about": "Description of Hotel 1",
                      "service": [
                        { "name": "Service 1", "svg": "svg_url_1" },
                        { "name": "Service 2", "svg": "svg_url_2" }
                      ],
                      "food": ["Food 1", "Food 2"],
                      "reviews": [
                        { "name": "Reviewer 1", "text": "Review 1" },
                        { "name": "Reviewer 2", "text": "Review 2" }
                      ],
                      "rate": 4.5,
                      "gallery": ["image_url_1", "image_url_2"],
                      "liked": ["user_id_1"],
                      "url": "hotel_url_1"
                    }
                  ],
                  "meta": {},
                  "msg": "Data"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "example": {
                  "status": 500,
                  "data": {},
                  "meta": {},
                  "msg": "Internal Server Error"
                }
              }
            }
          }
        }
      }
    },
    "/hotels/save/{id}": {
      "put": {
        "tags": ["Hotel"],
        "summary": "Toggle hotel like status",
        "security": [{ "xAuthToken": [] }],
        "description": "you can get uniq hotel id from above [/hotels] API. \n this API works for both save and unsave. \n This API check if id is already saved or not. if its not then it save but if its saved already then it remove from save",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "ID of the hotel to toggle like status"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "example": {
                  "status": 200,
                  "data": { "message": "success" },
                  "meta": {},
                  "msg": "Data"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "example": {
                  "status": 404,
                  "data": {},
                  "meta": {},
                  "msg": "Profile not found"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "example": {
                  "status": 500,
                  "data": {},
                  "meta": {},
                  "msg": "Internal Server Error"
                }
              }
            }
          }
        }
      }
    },
    "/category": {
      "get": {
        "summary": "get categories list",
        "description": "This category is for the destination only",
        "tags": ["Category"],
        "produces": ["application/json"],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 200
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "icon": {
                            "type": "string",
                            "description": "The icon associated with the item."
                          },
                          "name": {
                            "type": "string",
                            "description": "The name of the item."
                          },
                          "_id": {
                            "type": "string"
                          }
                        }
                      }
                    },

                    "message": {
                      "type": "string",
                      "example": "Data"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/category/{id}": {
      "get": {
        "summary": "get categories list",
        "description": "You can get category ID from [/category] API",
        "tags": ["Category"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the category",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "produces": ["application/json"],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "icon": {
                      "type": "string",
                      "description": "The icon associated with the item."
                    },
                    "name": {
                      "type": "string",
                      "description": "The name of the item."
                    },
                    "backgroundImage": {
                      "type": "string",
                      "description": "The background image associated with the item."
                    },
                    "about": {
                      "type": "string",
                      "description": "A description or information about the item."
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/destinations": {
      "get": {
        "summary": "Get destinations",
        "tags": ["Destination"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "categoryId",
            "in": "query",
            "description": "This is optional. If you send categoryId (You can get category ID from [/category] API), you get destination only that are in the category. ",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 200
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Destination"
                      }
                    },
                    "message": {
                      "type": "string",
                      "example": "Data"
                    }
                  }
                }
              }
            }
          },

          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/destinations/{id}": {
      "get": {
        "summary": "Get a specific destination by ID",
        "description": "you can get destination ID from [/destinations] API",
        "tags": ["Destination"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the destination",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Destination"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/destinations/cities": {
      "get": {
        "summary": "Get unique cities",
        "tags": ["Destination"],
        "description": "This gives the uniq cities that are mentioned in the destinations",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 200
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "meta": {
                      "type": "object",
                      "properties": {
                        "page": {
                          "type": "integer",
                          "example": 0
                        },
                        "pageSize": {
                          "type": "integer",
                          "example": 0
                        },
                        "totalItem": {
                          "type": "integer",
                          "example": 0
                        }
                      }
                    },
                    "msg": {
                      "type": "string",
                      "example": "Data"
                    }
                  }
                },
                "example": {
                  "status": 200,
                  "data": [
                    "Bhaktapur",
                    "Nagarkot",
                    "Kathmandu",
                    "Chitwan",
                    "Solukhumbu",
                    "Panauti"
                  ],
                  "meta": {
                    "page": 0,
                    "pageSize": 0,
                    "totalItem": 0
                  },
                  "msg": "Data"
                }
              }
            }
          }
        }
      }
    },
    "/destinations/search": {
      "get": {
        "summary": "Search for destinations by location and name",
        "description": "you can filter destination by both location and the name of destinations. you can get cities name  from [/destinations/cities] API. it search only one cities at a time. you cant send multiple cities name.",

        "tags": ["Destination"],
        "parameters": [
          {
            "name": "location",
            "in": "query",
            "description": "Location to search for",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "name",
            "in": "query",
            "description": "Name to search for",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "example": {
                  "status": 200,
                  "data": [
                    {
                      "_id": "60fd13f06a3a914b7cd19f2a",
                      "name": "Example Destination",
                      "location": "Example Location",
                      "description": "Example description",
                      "createdAt": "2021-08-01T00:00:00.000Z",
                      "updatedAt": "2021-08-01T00:00:00.000Z",
                      "__v": 0
                    }
                  ],
                  "meta": {
                    "page": 0,
                    "pageSize": 0,
                    "totalItem": 0
                  },
                  "msg": "Data"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "example": {
                  "status": 500,
                  "data": {},
                  "meta": {},
                  "msg": "Something went wrong"
                }
              }
            }
          }
        }
      }
    },
    "/user": {
      "get": {
        "summary": "Get user profile",
        "tags": ["user"],
        "security": [
          {
            "xAuthToken": []
          }
        ],
        "parameters": [],
        "requestBody": {},
        "responses": {
          "200": {
            "description": "Profile found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Profile"
                }
              }
            }
          },
          "401": {
            "description": "No token, authorization denied"
          },
          "404": {
            "description": "Profile not found"
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "put": {
        "summary": "Update user profile",
        "tags": ["user"],
        "description": "send only those values that needs to update. you don't have to all values",
        "security": [
          {
            "xAuthToken": []
          }
        ],
        "requestBody": {
          "description": "User profile data to update",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserProfileUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseSuccess"
                },
                "example": {
                  "status": 200,
                  "data": {
                    "_id": "6149a43b56e8e4d16c3e1e22",
                    "email": "user@example.com",
                    "fullName": "John Doe",
                    "role": "user",
                    "avatarUrl": "https://example.com/avatar.jpg",
                    "bio": "About me",
                    "gender": "Male",
                    "dob": "1990-01-01",
                    "address": "123 Street, City",
                    "contact": "1234567890",
                    "interest": ["Travel_id", "Photography_id"],
                    "visitedLocation": ["location_A_id", "location_A_id"],
                    "booked": ["Hotel_A_id", "Hotel_B_id"]
                  },
                  "meta": {},
                  "msg": "Profile Update Success"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseError"
                },
                "example": {
                  "status": 400,
                  "error": {},
                  "meta": {},
                  "msg": "Profile Update Error"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/user/password-update": {
      "put": {
        "summary": "Update user password",
        "tags": ["user"],
        "security": [{ "xAuthToken": [] }],
        "requestBody": {
          "description": "New password",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "password": {
                    "type": "string",
                    "description": "New password",
                    "example": "newpassword123"
                  }
                },
                "required": ["password"]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Password updated successfully",
            "content": {
              "application/json": {
                "example": {
                  "status": 200,
                  "data": {
                    "message": "Password updated successfully"
                  },
                  "meta": {},
                  "msg": "Password updated successfully"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "example": {
                  "status": 400,
                  "data": {
                    "message": "Validation error occurred"
                  },
                  "meta": {},
                  "msg": "Validation error occurred"
                }
              }
            }
          },
          "409": {
            "description": "User not found",
            "content": {
              "application/json": {
                "example": {
                  "status": 409,
                  "data": {},
                  "meta": {},
                  "msg": "User not found"
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "example": {
                  "status": 500,
                  "data": {},
                  "meta": {},
                  "msg": "Password update failed"
                }
              }
            }
          }
        }
      }
    },
    "/booking": {
      "get": {
        "tags": ["Booking"],
        "summary": "Get bookings [for both user and hotel user]",
        "security": [{ "xAuthToken": [] }],
        "description": "For user you get the booked done by you only. And for hotel user you get every list of bookings.",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BookingResponse"
                }
              }
            }
          },
          "404": {
            "description": "Profile not found"
          }
        }
      }
    },
    "/booking/{id}": {
      "post": {
        "tags": ["Booking"],
        "summary": "Create a booking [only for user]",
        "security": [{ "xAuthToken": [] }],
        "description": " there are some enum values , for paymentMethod:[online,cod] cod means cash on delivery, status has to be request always and type has to be hotel always. destination booking hasn't yet supported.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Hotel ID"
          }
        ],
        "requestBody": {
          "description": "Booking data",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BookingInput"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessResponse"
                }
              }
            }
          },
          "400": {
            "description": "Validation error",
            "schema": {
              "type": "object",
              "$ref": "#/components/schemas/ErrorResponse"
            }
          },
          "404": {
            "description": "Profile not found"
          }
        }
      },
      "put": {
        "tags": ["Booking"],
        "summary": "Update a booking [for both user. But there are some restrictions, read the description.]",
        "security": [{ "xAuthToken": [] }],
        "description": "Here ID is booking ID not hotel ID. For regular user you can only send cancel in status. reason once user get booked they can request cancel and its on hotel user hand to cancel it. For Hotel user they can send [booked and canceled] status. the logic is request gets booked and cancel gets canceled.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Booking ID"
          }
        ],
        "requestBody": {
          "description": "Booking data",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BookingInput"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessResponse"
                }
              }
            }
          },
          "400": {
            "description": "Validation error",
            "schema": {
              "type": "object",
              "$ref": "#/components/schemas/ErrorResponse"
            }
          },
          "404": {
            "description": "Profile not found"
          }
        }
      }
    },
    "/hotels/add": {
      "post": {
        "tags": ["ADMIN [Route been closed in production mode]"],
        "summary": "Add hotels in bulk",
        "description": "Add hotels to the in bulk. means it has to be in an Array",
        "security": [
          {
            "xAuthToken": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/HotelAdd"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Hotels added successfully",
            "content": {
              "application/json": {
                "example": [
                  {
                    "status": 200,
                    "data": {
                      "_id": "hotel_id",
                      "pid": "pid",
                      "name": "Hotel Name",
                      "location": "Location",
                      "price": "Price",
                      "about": "About Hotel",
                      "service": ["Service 1", "Service 2"],
                      "food": ["Food 1", "Food 2"],
                      "reviews": ["Review 1", "Review 2"],
                      "rate": 4.5,
                      "gallery": ["image1.jpg", "image2.jpg"],
                      "url": "http://example.com/hotel",
                      "liked": []
                    },
                    "meta": {},
                    "msg": "Hotel added successfully"
                  }
                ]
              }
            }
          },
          "400": {
            "description": "Validation error or failed to add hotel",
            "content": {
              "application/json": {
                "example": {
                  "status": 400,
                  "data": {
                    "errors": [
                      {
                        "msg": "Name cannot be empty"
                      },
                      {
                        "msg": "Location cannot be empty"
                      }
                    ]
                  },
                  "meta": {},
                  "msg": "Validation error or failed to add new Hotel"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "example": {
                  "status": 401,
                  "data": {},
                  "meta": {},
                  "msg": "Unauthorized"
                }
              }
            }
          },
          "404": {
            "description": "Profile not found",
            "content": {
              "application/json": {
                "example": {
                  "status": 404,
                  "data": {},
                  "meta": {},
                  "msg": "Profile not found"
                }
              }
            }
          }
        }
      }
    },
    "/category/add": {
      "post": {
        "tags": ["ADMIN [Route been closed in production mode]"],
        "summary": "Add category in bulk",
        "description": "Add category to the in bulk. means it has to be in an Array",
        "security": [
          {
            "xAuthToken": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/CategoryAdd"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Category added successfully",
            "content": {
              "application/json": {
                "example": [
                  {
                    "status": 200,
                    "data": {
                      "_id": "category_id",
                      "icon": "http://image.png",
                      "name": "category Name",
                      "backgroundImage": "http://image.png",
                      "about": "About Category"
                    },
                    "meta": {},
                    "msg": "Category added successfully"
                  }
                ]
              }
            }
          },
          "400": {
            "description": "Validation error or failed to add hotel",
            "content": {
              "application/json": {
                "example": {
                  "status": 400,
                  "data": {
                    "errors": [
                      {
                        "msg": "Name cannot be empty"
                      },
                      {
                        "msg": "backgroundImage cannot be empty"
                      }
                    ]
                  },
                  "meta": {},
                  "msg": "Validation error or failed to add new Category"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "example": {
                  "status": 401,
                  "data": {},
                  "meta": {},
                  "msg": "Unauthorized"
                }
              }
            }
          },
          "404": {
            "description": "Profile not found",
            "content": {
              "application/json": {
                "example": {
                  "status": 404,
                  "data": {},
                  "meta": {},
                  "msg": "Profile not found"
                }
              }
            }
          }
        }
      }
    },
    "/destinations/add": {
      "post": {
        "tags": ["ADMIN [Route been closed in production mode]"],
        "summary": "Add Destinations in bulk",
        "description": "Add Destinations to the in bulk. means it has to be in an Array",
        "security": [
          {
            "xAuthToken": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/DestinationsAdd"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 200
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Destination"
                      }
                    },
                    "message": {
                      "type": "string",
                      "example": "Data"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Validation error or failed to add hotel",
            "content": {
              "application/json": {
                "example": {
                  "status": 400,
                  "data": {
                    "errors": [
                      {
                        "msg": "Name cannot be empty"
                      },
                      {
                        "msg": "Location cannot be empty"
                      }
                    ]
                  },
                  "meta": {},
                  "msg": "Validation error or failed to add new Hotel"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "example": {
                  "status": 401,
                  "data": {},
                  "meta": {},
                  "msg": "Unauthorized"
                }
              }
            }
          },
          "404": {
            "description": "Profile not found",
            "content": {
              "application/json": {
                "example": {
                  "status": 404,
                  "data": {},
                  "meta": {},
                  "msg": "Profile not found"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Destination": {
        "type": "object",
        "properties": {
          "pid": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "location": {
            "type": "string"
          },
          "price": {
            "type": "string",
            "description": "It can be either a number or a string"
          },
          "about": {
            "type": "string"
          },
          "gallery": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "feature": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DesFeature"
            }
          },
          "highlight": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "extra": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DesExtra"
            }
          },
          "itinerary": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DesItinerary"
            }
          },
          "reviews": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DesReview"
            }
          },
          "rate": {
            "type": "string",
            "description": "It can be either a number or a string"
          },
          "url": {
            "type": "string"
          },
          "categoryId": {
            "type": "string"
          }
        }
      },
      "DesFeature": {
        "type": "object",
        "properties": {
          "svg": {
            "type": "string",
            "nullable": true
          },
          "name": {
            "type": "string"
          }
        }
      },
      "DesExtra": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string"
          },
          "text": {
            "type": "string"
          }
        }
      },
      "DesItinerary": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string"
          },
          "text": {
            "type": "string"
          }
        }
      },
      "DesReview": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "text": {
            "type": "string"
          }
        }
      },
      "Profile": {
        "type": "object",
        "properties": {
          "authId": { "type": "string" },
          "firstName": { "type": "string" },
          "lastName": { "type": "string" },
          "avatarUrl": { "type": "string" },
          "bio": { "type": "string" },
          "gender": { "type": "string" },
          "dob": { "type": "string" },
          "address": { "type": "string" },
          "contact": { "type": "string" },
          "interest": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Interest"
            }
          },
          "visitedLocation": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/VisitedLocation"
            }
          }
        }
      },
      "Interest": {
        "type": "object",
        "properties": {
          "id": { "type": "string" },
          "name": { "type": "string" }
        }
      },
      "VisitedLocation": {
        "type": "object",
        "properties": {
          "id": { "type": "string" },
          "imageSrc": { "type": "string" },
          "name": { "type": "string" },
          "rating": { "type": "string" }
        }
      },
      "UserProfileUpdate": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "format": "email"
          },
          "fullName": {
            "type": "string"
          },
          "avatarUrl": {
            "type": "string"
          },
          "bio": {
            "type": "string"
          },
          "gender": {
            "type": "string"
          },
          "dob": {
            "type": "string",
            "format": "date"
          },
          "address": {
            "type": "string"
          },
          "contact": {
            "type": "string"
          },
          "interest": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "visitedLocation": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "BookingResponse": {
        "type": "object",
        "properties": {
          "booking": {
            "$ref": "#/components/schemas/Booking"
          },
          "hotel": {
            "$ref": "#/components/schemas/Hotel"
          }
        }
      },
      "Booking": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string"
          },
          "hid": {
            "type": "string"
          },
          "startDate": {
            "type": "string",
            "format": "date-time"
          },
          "paymentMethod": {
            "type": "string",
            "enum": ["online", "cod"]
          },
          "payment": {
            "type": "number"
          },
          "fullName": {
            "type": "string"
          },
          "contact": {
            "type": "number"
          },
          "email": {
            "type": "string",
            "format": "email"
          },
          "roomType": {
            "type": "string"
          },
          "endDate": {
            "type": "string",
            "format": "date-time"
          },
          "status": {
            "type": "string",
            "enum": ["request", "booked", "cancel", "canceled"]
          },
          "type": {
            "type": "string",
            "enum": ["hotel", "destination"]
          },
          "isRead": {
            "type": "boolean"
          },
          "roomNumber": {
            "type": "number"
          }
        }
      },
      "BookingInput": {
        "type": "object",
        "properties": {
          "startDate": {
            "type": "string",
            "format": "date-time"
          },
          "paymentMethod": {
            "type": "string",
            "enum": ["online", "cod"]
          },
          "payment": {
            "type": "number"
          },
          "fullName": {
            "type": "string"
          },
          "contact": {
            "type": "number"
          },
          "email": {
            "type": "string"
          },
          "roomType": {
            "type": "string"
          },
          "roomNumber": {
            "type": "number"
          },
          "endDate": {
            "type": "string",
            "format": "date-time"
          },
          "status": {
            "type": "string",
            "enum": ["request", "booked", "cancel", "canceled"]
          },
          "type": {
            "type": "string",
            "enum": ["hotel", "destination"]
          }
        },
        "required": [
          "startDate",
          "paymentMethod",
          "fullName",
          "contact",
          "email",
          "roomType",
          "endDate",
          "status",
          "type"
        ],
        "additionalProperties": false
      },
      "BookingUpdate": {
        "type": "object",
        "properties": {
          "payment": {
            "type": "number"
          },
          "roomNumber": {
            "type": "number"
          },
          "status": {
            "type": "string",
            "enum": ["booked", "cancel", "canceled"]
          }
        },
        "required": ["roomNumber", "status", "payment"],
        "additionalProperties": false
      },
      "Hotel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "gallery": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "about": {
            "type": "string"
          },
          "rate": {
            "type": "number"
          },
          "price": {
            "type": "string"
          }
        }
      },
      "HotelAdd": {
        "type": "object",
        "properties": {
          "pid": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "location": {
            "type": "string"
          },
          "price": {
            "type": "string"
          },
          "about": {
            "type": "string"
          },
          "service": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string"
                },
                "svg": {
                  "type": "string"
                }
              }
            }
          },
          "food": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "reviews": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string"
                },
                "text": {
                  "type": "string"
                }
              }
            }
          },
          "rate": {
            "type": "number"
          },
          "gallery": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "url": {
            "type": "string"
          }
        }
      },
      "CategoryAdd": {
        "type": "object",
        "properties": {
          "icon": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "backgroundImage": {
            "type": "string"
          },
          "about": {
            "type": "string"
          }
        }
      },
      "DestinationsAdd": {
        "type": "object",
        "properties": {
          "pid": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "location": {
            "type": "string"
          },
          "price": {
            "type": "string"
          },
          "about": {
            "type": "string"
          },
          "gallery": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "feature": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string"
                },
                "svg": {
                  "type": "string"
                }
              }
            }
          },
          "highlight": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "extra": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "title": {
                  "type": "string"
                },
                "text": {
                  "type": "string"
                }
              }
            }
          },
          "itinerary": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "title": {
                  "type": "string"
                },
                "text": {
                  "type": "string"
                }
              }
            }
          },

          "reviews": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string"
                },
                "text": {
                  "type": "string"
                }
              }
            }
          },
          "rate": {
            "type": "number"
          },
          "url": {
            "type": "string"
          },
          "categoryId": {
            "type": "string"
          }
        }
      },
      "SuccessResponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string"
          }
        }
      },
      "ErrorResponse": {
        "type": "object",
        "properties": {
          "status": {
            "type": "integer",
            "example": 500
          },
          "message": {
            "type": "string",
            "example": "Internal Server Error"
          }
        }
      }
    },
    "securitySchemes": {
      "xAuthToken": {
        "type": "apiKey",
        "in": "header",
        "name": "x-auth-token"
      }
    }
  }
}
